{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport toast from 'react-hot-toast';\nexport const useCart = () => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const [cartItemCount, setCartItemCount] = useState(0);\n  const [cartTotal, setCartTotal] = useState(0);\n  const [cartSubtotal, setCartSubtotal] = useState(0);\n  const [cartTax, setCartTax] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [cartId, setCartId] = useState(null);\n\n  // Generate or retrieve cart session ID\n  useEffect(() => {\n    let sessionCartId = localStorage.getItem('cartId');\n    if (!sessionCartId) {\n      sessionCartId = `cart_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('cartId', sessionCartId);\n    }\n    setCartId(sessionCartId);\n  }, []);\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      try {\n        const items = JSON.parse(savedCart);\n        if (Array.isArray(items)) {\n          setCartItems(items);\n        }\n      } catch (error) {\n        console.error('Error loading cart from localStorage:', error);\n        setCartItems([]);\n        localStorage.removeItem('cart');\n      }\n    }\n  }, []);\n\n  // Update counts and totals when cart items change\n  useEffect(() => {\n    const itemCount = cartItems.reduce((sum, item) => sum + (item.quantity || 0), 0);\n    const subtotal = cartItems.reduce((sum, item) => {\n      const price = parseFloat(item.price) || 0;\n      const quantity = parseInt(item.quantity) || 0;\n      return sum + price * quantity;\n    }, 0);\n\n    // Calculate tax (19% VAT for Romania)\n    const tax = subtotal * 0.19;\n    const total = subtotal + tax;\n    setCartItemCount(itemCount);\n    setCartSubtotal(subtotal);\n    setCartTax(tax);\n    setCartTotal(total);\n\n    // Save to localStorage with error handling\n    try {\n      localStorage.setItem('cart', JSON.stringify(cartItems));\n    } catch (error) {\n      console.error('Error saving cart to localStorage:', error);\n      toast.error('Eroare la salvarea coșului');\n    }\n  }, [cartItems]);\n\n  // Format price for display\n  const formatPrice = useCallback(price => {\n    return new Intl.NumberFormat('ro-RO', {\n      style: 'currency',\n      currency: 'RON'\n    }).format(price);\n  }, []);\n\n  // Add item to cart\n  const addToCart = useCallback((product, quantity = 1) => {\n    if (!product || !product.id) {\n      toast.error('Produs invalid');\n      return;\n    }\n    if (!product.inStock) {\n      toast.error('Produsul nu este în stoc');\n      return;\n    }\n    if (quantity <= 0) {\n      toast.error('Cantitatea trebuie să fie pozitivă');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      setCartItems(prevItems => {\n        const existingItem = prevItems.find(item => item.id === product.id);\n        if (existingItem) {\n          const newQuantity = existingItem.quantity + quantity;\n          toast.success(`${product.name} - cantitate actualizată la ${newQuantity}`);\n          return prevItems.map(item => item.id === product.id ? {\n            ...item,\n            quantity: newQuantity\n          } : item);\n        } else {\n          toast.success(`${product.name} adăugat în coș`);\n          return [...prevItems, {\n            ...product,\n            quantity,\n            addedAt: new Date().toISOString()\n          }];\n        }\n      });\n    } catch (error) {\n      console.error('Error adding to cart:', error);\n      toast.error('Eroare la adăugarea în coș');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Remove item from cart\n  const removeFromCart = useCallback(productId => {\n    if (!productId) return;\n    setCartItems(prevItems => {\n      const item = prevItems.find(item => item.id === productId);\n      if (item) {\n        toast.success(`${item.name} eliminat din coș`);\n      }\n      return prevItems.filter(item => item.id !== productId);\n    });\n  }, []);\n\n  // Update item quantity\n  const updateQuantity = useCallback((productId, quantity) => {\n    if (!productId) return;\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    setCartItems(prevItems => {\n      const item = prevItems.find(item => item.id === productId);\n      if (item) {\n        toast.success(`${item.name} - cantitate actualizată`);\n      }\n      return prevItems.map(item => item.id === productId ? {\n        ...item,\n        quantity: parseInt(quantity)\n      } : item);\n    });\n  }, [removeFromCart]);\n\n  // Increment item quantity\n  const incrementQuantity = useCallback(productId => {\n    setCartItems(prevItems => prevItems.map(item => item.id === productId ? {\n      ...item,\n      quantity: item.quantity + 1\n    } : item));\n  }, []);\n\n  // Decrement item quantity\n  const decrementQuantity = useCallback(productId => {\n    setCartItems(prevItems => prevItems.map(item => {\n      if (item.id === productId) {\n        const newQuantity = item.quantity - 1;\n        return newQuantity > 0 ? {\n          ...item,\n          quantity: newQuantity\n        } : null;\n      }\n      return item;\n    }).filter(Boolean));\n  }, []);\n\n  // Clear entire cart\n  const clearCart = useCallback(() => {\n    setCartItems([]);\n    toast.success('Coșul a fost golit');\n  }, []);\n\n  // Get cart item by product ID\n  const getCartItem = useCallback(productId => {\n    return cartItems.find(item => item.id === productId);\n  }, [cartItems]);\n\n  // Check if product is in cart\n  const isInCart = useCallback(productId => {\n    return cartItems.some(item => item.id === productId);\n  }, [cartItems]);\n\n  // Get cart summary for checkout\n  const getCartSummary = useCallback(() => {\n    return {\n      items: cartItems,\n      itemCount: cartItemCount,\n      subtotal: cartSubtotal,\n      tax: cartTax,\n      total: cartTotal,\n      cartId: cartId,\n      formattedSubtotal: formatPrice(cartSubtotal),\n      formattedTax: formatPrice(cartTax),\n      formattedTotal: formatPrice(cartTotal)\n    };\n  }, [cartItems, cartItemCount, cartSubtotal, cartTax, cartTotal, cartId, formatPrice]);\n\n  // Validate cart items (check stock, prices, etc.)\n  const validateCart = useCallback(async () => {\n    // This would typically make an API call to validate items\n    // For now, we'll do basic validation\n    const invalidItems = cartItems.filter(item => !item.id || !item.name || !item.price || item.quantity <= 0);\n    if (invalidItems.length > 0) {\n      console.warn('Invalid cart items found:', invalidItems);\n      // Remove invalid items\n      setCartItems(prevItems => prevItems.filter(item => item.id && item.name && item.price && item.quantity > 0));\n      toast.error('Unele produse din coș au fost eliminate (produse invalide)');\n    }\n    return invalidItems.length === 0;\n  }, [cartItems]);\n  return {\n    // State\n    cartItems,\n    cartItemCount,\n    cartTotal,\n    cartSubtotal,\n    cartTax,\n    isLoading,\n    cartId,\n    // Actions\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    incrementQuantity,\n    decrementQuantity,\n    clearCart,\n    // Utilities\n    getCartItem,\n    isInCart,\n    getCartSummary,\n    validateCart,\n    formatPrice\n  };\n};\n_s(useCart, \"bM/8OucQiLtLVjHmTN+dtUoOyxQ=\");","map":{"version":3,"names":["useState","useEffect","useCallback","toast","useCart","_s","cartItems","setCartItems","cartItemCount","setCartItemCount","cartTotal","setCartTotal","cartSubtotal","setCartSubtotal","cartTax","setCartTax","isLoading","setIsLoading","cartId","setCartId","sessionCartId","localStorage","getItem","Date","now","Math","random","toString","substr","setItem","savedCart","items","JSON","parse","Array","isArray","error","console","removeItem","itemCount","reduce","sum","item","quantity","subtotal","price","parseFloat","parseInt","tax","total","stringify","formatPrice","Intl","NumberFormat","style","currency","format","addToCart","product","id","inStock","prevItems","existingItem","find","newQuantity","success","name","map","addedAt","toISOString","removeFromCart","productId","filter","updateQuantity","incrementQuantity","decrementQuantity","Boolean","clearCart","getCartItem","isInCart","some","getCartSummary","formattedSubtotal","formattedTax","formattedTotal","validateCart","invalidItems","length","warn"],"sources":["/Users/claudiu/Desktop/pe foc de lemne/frontend/src/hooks/useCart.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport toast from 'react-hot-toast';\n\nexport const useCart = () => {\n  const [cartItems, setCartItems] = useState([]);\n  const [cartItemCount, setCartItemCount] = useState(0);\n  const [cartTotal, setCartTotal] = useState(0);\n  const [cartSubtotal, setCartSubtotal] = useState(0);\n  const [cartTax, setCartTax] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [cartId, setCartId] = useState(null);\n  \n  // Generate or retrieve cart session ID\n  useEffect(() => {\n    let sessionCartId = localStorage.getItem('cartId');\n    if (!sessionCartId) {\n      sessionCartId = `cart_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('cartId', sessionCartId);\n    }\n    setCartId(sessionCartId);\n  }, []);\n  \n  // Load cart from localStorage on mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      try {\n        const items = JSON.parse(savedCart);\n        if (Array.isArray(items)) {\n          setCartItems(items);\n        }\n      } catch (error) {\n        console.error('Error loading cart from localStorage:', error);\n        setCartItems([]);\n        localStorage.removeItem('cart');\n      }\n    }\n  }, []);\n  \n  // Update counts and totals when cart items change\n  useEffect(() => {\n    const itemCount = cartItems.reduce((sum, item) => sum + (item.quantity || 0), 0);\n    const subtotal = cartItems.reduce((sum, item) => {\n      const price = parseFloat(item.price) || 0;\n      const quantity = parseInt(item.quantity) || 0;\n      return sum + (price * quantity);\n    }, 0);\n    \n    // Calculate tax (19% VAT for Romania)\n    const tax = subtotal * 0.19;\n    const total = subtotal + tax;\n    \n    setCartItemCount(itemCount);\n    setCartSubtotal(subtotal);\n    setCartTax(tax);\n    setCartTotal(total);\n    \n    // Save to localStorage with error handling\n    try {\n      localStorage.setItem('cart', JSON.stringify(cartItems));\n    } catch (error) {\n      console.error('Error saving cart to localStorage:', error);\n      toast.error('Eroare la salvarea coșului');\n    }\n  }, [cartItems]);\n  \n  // Format price for display\n  const formatPrice = useCallback((price) => {\n    return new Intl.NumberFormat('ro-RO', {\n      style: 'currency',\n      currency: 'RON'\n    }).format(price);\n  }, []);\n  \n  // Add item to cart\n  const addToCart = useCallback((product, quantity = 1) => {\n    if (!product || !product.id) {\n      toast.error('Produs invalid');\n      return;\n    }\n    \n    if (!product.inStock) {\n      toast.error('Produsul nu este în stoc');\n      return;\n    }\n    \n    if (quantity <= 0) {\n      toast.error('Cantitatea trebuie să fie pozitivă');\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      setCartItems(prevItems => {\n        const existingItem = prevItems.find(item => item.id === product.id);\n        \n        if (existingItem) {\n          const newQuantity = existingItem.quantity + quantity;\n          toast.success(`${product.name} - cantitate actualizată la ${newQuantity}`);\n          \n          return prevItems.map(item =>\n            item.id === product.id\n              ? { ...item, quantity: newQuantity }\n              : item\n          );\n        } else {\n          toast.success(`${product.name} adăugat în coș`);\n          \n          return [...prevItems, { \n            ...product, \n            quantity,\n            addedAt: new Date().toISOString()\n          }];\n        }\n      });\n    } catch (error) {\n      console.error('Error adding to cart:', error);\n      toast.error('Eroare la adăugarea în coș');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  \n  // Remove item from cart\n  const removeFromCart = useCallback((productId) => {\n    if (!productId) return;\n    \n    setCartItems(prevItems => {\n      const item = prevItems.find(item => item.id === productId);\n      if (item) {\n        toast.success(`${item.name} eliminat din coș`);\n      }\n      return prevItems.filter(item => item.id !== productId);\n    });\n  }, []);\n  \n  // Update item quantity\n  const updateQuantity = useCallback((productId, quantity) => {\n    if (!productId) return;\n    \n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    \n    setCartItems(prevItems => {\n      const item = prevItems.find(item => item.id === productId);\n      if (item) {\n        toast.success(`${item.name} - cantitate actualizată`);\n      }\n      \n      return prevItems.map(item =>\n        item.id === productId\n          ? { ...item, quantity: parseInt(quantity) }\n          : item\n      );\n    });\n  }, [removeFromCart]);\n  \n  // Increment item quantity\n  const incrementQuantity = useCallback((productId) => {\n    setCartItems(prevItems =>\n      prevItems.map(item =>\n        item.id === productId\n          ? { ...item, quantity: item.quantity + 1 }\n          : item\n      )\n    );\n  }, []);\n  \n  // Decrement item quantity\n  const decrementQuantity = useCallback((productId) => {\n    setCartItems(prevItems =>\n      prevItems.map(item => {\n        if (item.id === productId) {\n          const newQuantity = item.quantity - 1;\n          return newQuantity > 0 ? { ...item, quantity: newQuantity } : null;\n        }\n        return item;\n      }).filter(Boolean)\n    );\n  }, []);\n  \n  // Clear entire cart\n  const clearCart = useCallback(() => {\n    setCartItems([]);\n    toast.success('Coșul a fost golit');\n  }, []);\n  \n  // Get cart item by product ID\n  const getCartItem = useCallback((productId) => {\n    return cartItems.find(item => item.id === productId);\n  }, [cartItems]);\n  \n  // Check if product is in cart\n  const isInCart = useCallback((productId) => {\n    return cartItems.some(item => item.id === productId);\n  }, [cartItems]);\n  \n  // Get cart summary for checkout\n  const getCartSummary = useCallback(() => {\n    return {\n      items: cartItems,\n      itemCount: cartItemCount,\n      subtotal: cartSubtotal,\n      tax: cartTax,\n      total: cartTotal,\n      cartId: cartId,\n      formattedSubtotal: formatPrice(cartSubtotal),\n      formattedTax: formatPrice(cartTax),\n      formattedTotal: formatPrice(cartTotal)\n    };\n  }, [cartItems, cartItemCount, cartSubtotal, cartTax, cartTotal, cartId, formatPrice]);\n  \n  // Validate cart items (check stock, prices, etc.)\n  const validateCart = useCallback(async () => {\n    // This would typically make an API call to validate items\n    // For now, we'll do basic validation\n    const invalidItems = cartItems.filter(item => \n      !item.id || !item.name || !item.price || item.quantity <= 0\n    );\n    \n    if (invalidItems.length > 0) {\n      console.warn('Invalid cart items found:', invalidItems);\n      // Remove invalid items\n      setCartItems(prevItems => \n        prevItems.filter(item => \n          item.id && item.name && item.price && item.quantity > 0\n        )\n      );\n      toast.error('Unele produse din coș au fost eliminate (produse invalide)');\n    }\n    \n    return invalidItems.length === 0;\n  }, [cartItems]);\n  \n  return {\n    // State\n    cartItems,\n    cartItemCount,\n    cartTotal,\n    cartSubtotal,\n    cartTax,\n    isLoading,\n    cartId,\n    \n    // Actions\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    incrementQuantity,\n    decrementQuantity,\n    clearCart,\n    \n    // Utilities\n    getCartItem,\n    isInCart,\n    getCartSummary,\n    validateCart,\n    formatPrice\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}