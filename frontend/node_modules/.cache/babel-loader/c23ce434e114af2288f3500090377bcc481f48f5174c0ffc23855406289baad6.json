{"ast":null,"code":"// Performance utilities and monitoring\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = new Map();\n    this.observers = new Map();\n    this.isSupported = 'performance' in window;\n    this.vitalsSupported = 'PerformanceObserver' in window;\n    if (this.vitalsSupported) {\n      this.initializeWebVitals();\n    }\n  }\n\n  // Initialize Core Web Vitals monitoring\n  initializeWebVitals() {\n    try {\n      // Largest Contentful Paint (LCP)\n      this.observeMetric('largest-contentful-paint', entry => {\n        var _entry$element;\n        this.recordMetric('LCP', entry.startTime, {\n          target: ((_entry$element = entry.element) === null || _entry$element === void 0 ? void 0 : _entry$element.tagName) || 'unknown',\n          size: entry.size\n        });\n      });\n\n      // First Input Delay (FID)\n      this.observeMetric('first-input', entry => {\n        this.recordMetric('FID', entry.processingStart - entry.startTime, {\n          eventType: entry.name\n        });\n      });\n\n      // Cumulative Layout Shift (CLS)\n      this.observeMetric('layout-shift', entry => {\n        if (!entry.hadRecentInput) {\n          var _entry$sources;\n          this.recordMetric('CLS', entry.value, {\n            sources: ((_entry$sources = entry.sources) === null || _entry$sources === void 0 ? void 0 : _entry$sources.length) || 0\n          });\n        }\n      });\n    } catch (error) {\n      console.warn('Eroare la inițializarea monitorizării performanței:', error);\n    }\n  }\n\n  // Observe specific performance metrics\n  observeMetric(type, callback) {\n    try {\n      const observer = new PerformanceObserver(list => {\n        for (const entry of list.getEntries()) {\n          callback(entry);\n        }\n      });\n      observer.observe({\n        entryTypes: [type]\n      });\n      this.observers.set(type, observer);\n    } catch (error) {\n      console.warn(`Nu s-a putut observa metrica ${type}:`, error);\n    }\n  }\n\n  // Record a performance metric\n  recordMetric(name, value, metadata = {}) {\n    const timestamp = Date.now();\n    const metric = {\n      name,\n      value,\n      timestamp,\n      metadata,\n      url: window.location.href\n    };\n\n    // Store metric\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, []);\n    }\n    this.metrics.get(name).push(metric);\n\n    // Log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`📊 Metrică performanță: ${name} = ${value.toFixed(2)}ms`, metadata);\n    }\n\n    // Send to analytics (if configured)\n    this.sendToAnalytics(metric);\n  }\n\n  // Measure function execution time\n  measureFunction(name, fn) {\n    return async (...args) => {\n      const startTime = performance.now();\n      try {\n        const result = await fn(...args);\n        const duration = performance.now() - startTime;\n        this.recordMetric(`Function: ${name}`, duration);\n        return result;\n      } catch (error) {\n        const duration = performance.now() - startTime;\n        this.recordMetric(`Function: ${name} (Error)`, duration, {\n          error: error.message\n        });\n        throw error;\n      }\n    };\n  }\n\n  // Measure React component render time\n  measureComponentRender(componentName) {\n    return {\n      onRenderStart: () => {\n        this.startTime = performance.now();\n      },\n      onRenderEnd: () => {\n        if (this.startTime) {\n          const duration = performance.now() - this.startTime;\n          this.recordMetric(`Component Render: ${componentName}`, duration);\n          this.startTime = null;\n        }\n      }\n    };\n  }\n\n  // Measure network requests\n  measureNetworkRequest(url, method = 'GET') {\n    const startTime = performance.now();\n    return {\n      onComplete: response => {\n        const duration = performance.now() - startTime;\n        this.recordMetric('Network Request', duration, {\n          url,\n          method,\n          status: response === null || response === void 0 ? void 0 : response.status,\n          success: response === null || response === void 0 ? void 0 : response.ok\n        });\n      },\n      onError: error => {\n        const duration = performance.now() - startTime;\n        this.recordMetric('Network Request (Error)', duration, {\n          url,\n          method,\n          error: error.message\n        });\n      }\n    };\n  }\n\n  // Get performance metrics summary\n  getMetricsSummary() {\n    const summary = {};\n    for (const [name, values] of this.metrics.entries()) {\n      const recent = values.slice(-10); // Last 10 measurements\n      const avg = recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n      const min = Math.min(...recent.map(m => m.value));\n      const max = Math.max(...recent.map(m => m.value));\n      summary[name] = {\n        average: avg,\n        min,\n        max,\n        count: values.length,\n        recent: recent.length\n      };\n    }\n    return summary;\n  }\n\n  // Check if performance is good\n  isPerformanceGood() {\n    const summary = this.getMetricsSummary();\n    const checks = {\n      lcp: !summary.LCP || summary.LCP.average < 2500,\n      // < 2.5s\n      fid: !summary.FID || summary.FID.average < 100,\n      // < 100ms\n      cls: !summary.CLS || summary.CLS.average < 0.1 // < 0.1\n    };\n    return Object.values(checks).every(check => check);\n  }\n\n  // Send metrics to analytics service\n  sendToAnalytics(metric) {\n    if (typeof gtag !== 'undefined') {\n      gtag('event', 'performance_metric', {\n        metric_name: metric.name,\n        metric_value: Math.round(metric.value),\n        custom_map: {\n          metric_metadata: JSON.stringify(metric.metadata)\n        }\n      });\n    }\n  }\n\n  // Clean up observers\n  disconnect() {\n    for (const observer of this.observers.values()) {\n      observer.disconnect();\n    }\n    this.observers.clear();\n  }\n}\n\n// Bundle size monitoring\nexport const bundleAnalyzer = {\n  // Calculate approximate bundle size\n  estimateBundleSize() {\n    if (!performance.getEntriesByType) return null;\n    const resources = performance.getEntriesByType('resource');\n    const jsFiles = resources.filter(r => r.name.includes('.js'));\n    const cssFiles = resources.filter(r => r.name.includes('.css'));\n    const jsSize = jsFiles.reduce((total, file) => total + (file.transferSize || 0), 0);\n    const cssSize = cssFiles.reduce((total, file) => total + (file.transferSize || 0), 0);\n    return {\n      javascript: jsSize,\n      css: cssSize,\n      total: jsSize + cssSize,\n      files: {\n        js: jsFiles.length,\n        css: cssFiles.length\n      }\n    };\n  },\n  // Log bundle analysis\n  logBundleAnalysis() {\n    const analysis = this.estimateBundleSize();\n    if (analysis && process.env.NODE_ENV === 'development') {\n      console.group('📦 Analiză dimensiune bundle');\n      console.log(`JavaScript: ${(analysis.javascript / 1024).toFixed(2)} KB`);\n      console.log(`CSS: ${(analysis.css / 1024).toFixed(2)} KB`);\n      console.log(`Total: ${(analysis.total / 1024).toFixed(2)} KB`);\n      console.log(`Fișiere: ${analysis.files.js} JS, ${analysis.files.css} CSS`);\n      console.groupEnd();\n    }\n    return analysis;\n  }\n};\n\n// Memory usage monitoring\nexport const memoryMonitor = {\n  // Get current memory usage\n  getMemoryUsage() {\n    if (!performance.memory) return null;\n    return {\n      used: performance.memory.usedJSHeapSize,\n      total: performance.memory.totalJSHeapSize,\n      limit: performance.memory.jsHeapSizeLimit,\n      percentage: performance.memory.usedJSHeapSize / performance.memory.totalJSHeapSize * 100\n    };\n  },\n  // Check for memory leaks\n  detectMemoryLeaks() {\n    const usage = this.getMemoryUsage();\n    if (!usage) return false;\n\n    // Consider it a potential leak if using >80% of allocated memory\n    return usage.percentage > 80;\n  },\n  // Log memory usage\n  logMemoryUsage() {\n    const usage = this.getMemoryUsage();\n    if (usage && process.env.NODE_ENV === 'development') {\n      console.log(`🧠 Memorie folosită: ${(usage.used / 1048576).toFixed(2)} MB (${usage.percentage.toFixed(1)}%)`);\n      if (this.detectMemoryLeaks()) {\n        console.warn('⚠️ Posibilă scurgere de memorie detectată!');\n      }\n    }\n    return usage;\n  }\n};\n\n// Performance optimization utilities\nexport const performanceUtils = {\n  // Debounce function for performance\n  debounce(func, wait, immediate = false) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        timeout = null;\n        if (!immediate) func(...args);\n      };\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func(...args);\n    };\n  },\n  // Throttle function for performance\n  throttle(func, limit) {\n    let inThrottle;\n    return function (...args) {\n      if (!inThrottle) {\n        func.apply(this, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  },\n  // Request idle callback with fallback\n  requestIdleCallback(callback, options = {}) {\n    if ('requestIdleCallback' in window) {\n      return window.requestIdleCallback(callback, options);\n    } else {\n      // Fallback for browsers without support\n      return setTimeout(() => callback({\n        timeRemaining: () => 50\n      }), 1);\n    }\n  },\n  // Cancel idle callback\n  cancelIdleCallback(id) {\n    if ('cancelIdleCallback' in window) {\n      window.cancelIdleCallback(id);\n    } else {\n      clearTimeout(id);\n    }\n  },\n  // Optimize heavy computations\n  optimizeComputation(computation, chunkSize = 1000) {\n    return new Promise(resolve => {\n      const chunks = [];\n      let index = 0;\n      const processChunk = () => {\n        const endIndex = Math.min(index + chunkSize, computation.length);\n        const chunk = computation.slice(index, endIndex);\n        chunks.push(chunk);\n        index = endIndex;\n        if (index < computation.length) {\n          this.requestIdleCallback(processChunk);\n        } else {\n          resolve(chunks.flat());\n        }\n      };\n      processChunk();\n    });\n  }\n};\n\n// Create global performance monitor instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Initialize monitoring when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => {\n    performanceMonitor.recordMetric('DOM Ready', performance.now());\n  });\n} else {\n  performanceMonitor.recordMetric('DOM Ready', performance.now());\n}\n\n// Monitor page load\nwindow.addEventListener('load', () => {\n  performanceMonitor.recordMetric('Page Load', performance.now());\n\n  // Log initial bundle and memory analysis\n  setTimeout(() => {\n    bundleAnalyzer.logBundleAnalysis();\n    memoryMonitor.logMemoryUsage();\n  }, 1000);\n});\n\n// Clean up on page unload\nwindow.addEventListener('beforeunload', () => {\n  performanceMonitor.disconnect();\n});\nexport default performanceMonitor;","map":{"version":3,"names":["PerformanceMonitor","constructor","metrics","Map","observers","isSupported","window","vitalsSupported","initializeWebVitals","observeMetric","entry","_entry$element","recordMetric","startTime","target","element","tagName","size","processingStart","eventType","name","hadRecentInput","_entry$sources","value","sources","length","error","console","warn","type","callback","observer","PerformanceObserver","list","getEntries","observe","entryTypes","set","metadata","timestamp","Date","now","metric","url","location","href","has","get","push","process","env","NODE_ENV","log","toFixed","sendToAnalytics","measureFunction","fn","args","performance","result","duration","message","measureComponentRender","componentName","onRenderStart","onRenderEnd","measureNetworkRequest","method","onComplete","response","status","success","ok","onError","getMetricsSummary","summary","values","entries","recent","slice","avg","reduce","sum","m","min","Math","map","max","average","count","isPerformanceGood","checks","lcp","LCP","fid","FID","cls","CLS","Object","every","check","gtag","metric_name","metric_value","round","custom_map","metric_metadata","JSON","stringify","disconnect","clear","bundleAnalyzer","estimateBundleSize","getEntriesByType","resources","jsFiles","filter","r","includes","cssFiles","jsSize","total","file","transferSize","cssSize","javascript","css","files","js","logBundleAnalysis","analysis","group","groupEnd","memoryMonitor","getMemoryUsage","memory","used","usedJSHeapSize","totalJSHeapSize","limit","jsHeapSizeLimit","percentage","detectMemoryLeaks","usage","logMemoryUsage","performanceUtils","debounce","func","wait","immediate","timeout","executedFunction","later","callNow","clearTimeout","setTimeout","throttle","inThrottle","apply","requestIdleCallback","options","timeRemaining","cancelIdleCallback","id","optimizeComputation","computation","chunkSize","Promise","resolve","chunks","index","processChunk","endIndex","chunk","flat","performanceMonitor","document","readyState","addEventListener"],"sources":["/Users/claudiu/Desktop/pe foc de lemne/frontend/src/utils/performance.js"],"sourcesContent":["// Performance utilities and monitoring\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = new Map();\n    this.observers = new Map();\n    this.isSupported = 'performance' in window;\n    this.vitalsSupported = 'PerformanceObserver' in window;\n    \n    if (this.vitalsSupported) {\n      this.initializeWebVitals();\n    }\n  }\n\n  // Initialize Core Web Vitals monitoring\n  initializeWebVitals() {\n    try {\n      // Largest Contentful Paint (LCP)\n      this.observeMetric('largest-contentful-paint', (entry) => {\n        this.recordMetric('LCP', entry.startTime, {\n          target: entry.element?.tagName || 'unknown',\n          size: entry.size\n        });\n      });\n\n      // First Input Delay (FID)\n      this.observeMetric('first-input', (entry) => {\n        this.recordMetric('FID', entry.processingStart - entry.startTime, {\n          eventType: entry.name\n        });\n      });\n\n      // Cumulative Layout Shift (CLS)\n      this.observeMetric('layout-shift', (entry) => {\n        if (!entry.hadRecentInput) {\n          this.recordMetric('CLS', entry.value, {\n            sources: entry.sources?.length || 0\n          });\n        }\n      });\n\n    } catch (error) {\n      console.warn('Eroare la inițializarea monitorizării performanței:', error);\n    }\n  }\n\n  // Observe specific performance metrics\n  observeMetric(type, callback) {\n    try {\n      const observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          callback(entry);\n        }\n      });\n\n      observer.observe({ entryTypes: [type] });\n      this.observers.set(type, observer);\n    } catch (error) {\n      console.warn(`Nu s-a putut observa metrica ${type}:`, error);\n    }\n  }\n\n  // Record a performance metric\n  recordMetric(name, value, metadata = {}) {\n    const timestamp = Date.now();\n    const metric = {\n      name,\n      value,\n      timestamp,\n      metadata,\n      url: window.location.href\n    };\n\n    // Store metric\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, []);\n    }\n    this.metrics.get(name).push(metric);\n\n    // Log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`📊 Metrică performanță: ${name} = ${value.toFixed(2)}ms`, metadata);\n    }\n\n    // Send to analytics (if configured)\n    this.sendToAnalytics(metric);\n  }\n\n  // Measure function execution time\n  measureFunction(name, fn) {\n    return async (...args) => {\n      const startTime = performance.now();\n      try {\n        const result = await fn(...args);\n        const duration = performance.now() - startTime;\n        this.recordMetric(`Function: ${name}`, duration);\n        return result;\n      } catch (error) {\n        const duration = performance.now() - startTime;\n        this.recordMetric(`Function: ${name} (Error)`, duration, { error: error.message });\n        throw error;\n      }\n    };\n  }\n\n  // Measure React component render time\n  measureComponentRender(componentName) {\n    return {\n      onRenderStart: () => {\n        this.startTime = performance.now();\n      },\n      onRenderEnd: () => {\n        if (this.startTime) {\n          const duration = performance.now() - this.startTime;\n          this.recordMetric(`Component Render: ${componentName}`, duration);\n          this.startTime = null;\n        }\n      }\n    };\n  }\n\n  // Measure network requests\n  measureNetworkRequest(url, method = 'GET') {\n    const startTime = performance.now();\n    \n    return {\n      onComplete: (response) => {\n        const duration = performance.now() - startTime;\n        this.recordMetric('Network Request', duration, {\n          url,\n          method,\n          status: response?.status,\n          success: response?.ok\n        });\n      },\n      onError: (error) => {\n        const duration = performance.now() - startTime;\n        this.recordMetric('Network Request (Error)', duration, {\n          url,\n          method,\n          error: error.message\n        });\n      }\n    };\n  }\n\n  // Get performance metrics summary\n  getMetricsSummary() {\n    const summary = {};\n    \n    for (const [name, values] of this.metrics.entries()) {\n      const recent = values.slice(-10); // Last 10 measurements\n      const avg = recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n      const min = Math.min(...recent.map(m => m.value));\n      const max = Math.max(...recent.map(m => m.value));\n      \n      summary[name] = {\n        average: avg,\n        min,\n        max,\n        count: values.length,\n        recent: recent.length\n      };\n    }\n    \n    return summary;\n  }\n\n  // Check if performance is good\n  isPerformanceGood() {\n    const summary = this.getMetricsSummary();\n    \n    const checks = {\n      lcp: !summary.LCP || summary.LCP.average < 2500, // < 2.5s\n      fid: !summary.FID || summary.FID.average < 100,  // < 100ms\n      cls: !summary.CLS || summary.CLS.average < 0.1   // < 0.1\n    };\n    \n    return Object.values(checks).every(check => check);\n  }\n\n  // Send metrics to analytics service\n  sendToAnalytics(metric) {\n    if (typeof gtag !== 'undefined') {\n      gtag('event', 'performance_metric', {\n        metric_name: metric.name,\n        metric_value: Math.round(metric.value),\n        custom_map: {\n          metric_metadata: JSON.stringify(metric.metadata)\n        }\n      });\n    }\n  }\n\n  // Clean up observers\n  disconnect() {\n    for (const observer of this.observers.values()) {\n      observer.disconnect();\n    }\n    this.observers.clear();\n  }\n}\n\n// Bundle size monitoring\nexport const bundleAnalyzer = {\n  // Calculate approximate bundle size\n  estimateBundleSize() {\n    if (!performance.getEntriesByType) return null;\n    \n    const resources = performance.getEntriesByType('resource');\n    const jsFiles = resources.filter(r => r.name.includes('.js'));\n    const cssFiles = resources.filter(r => r.name.includes('.css'));\n    \n    const jsSize = jsFiles.reduce((total, file) => total + (file.transferSize || 0), 0);\n    const cssSize = cssFiles.reduce((total, file) => total + (file.transferSize || 0), 0);\n    \n    return {\n      javascript: jsSize,\n      css: cssSize,\n      total: jsSize + cssSize,\n      files: {\n        js: jsFiles.length,\n        css: cssFiles.length\n      }\n    };\n  },\n\n  // Log bundle analysis\n  logBundleAnalysis() {\n    const analysis = this.estimateBundleSize();\n    if (analysis && process.env.NODE_ENV === 'development') {\n      console.group('📦 Analiză dimensiune bundle');\n      console.log(`JavaScript: ${(analysis.javascript / 1024).toFixed(2)} KB`);\n      console.log(`CSS: ${(analysis.css / 1024).toFixed(2)} KB`);\n      console.log(`Total: ${(analysis.total / 1024).toFixed(2)} KB`);\n      console.log(`Fișiere: ${analysis.files.js} JS, ${analysis.files.css} CSS`);\n      console.groupEnd();\n    }\n    return analysis;\n  }\n};\n\n// Memory usage monitoring\nexport const memoryMonitor = {\n  // Get current memory usage\n  getMemoryUsage() {\n    if (!performance.memory) return null;\n    \n    return {\n      used: performance.memory.usedJSHeapSize,\n      total: performance.memory.totalJSHeapSize,\n      limit: performance.memory.jsHeapSizeLimit,\n      percentage: (performance.memory.usedJSHeapSize / performance.memory.totalJSHeapSize) * 100\n    };\n  },\n\n  // Check for memory leaks\n  detectMemoryLeaks() {\n    const usage = this.getMemoryUsage();\n    if (!usage) return false;\n    \n    // Consider it a potential leak if using >80% of allocated memory\n    return usage.percentage > 80;\n  },\n\n  // Log memory usage\n  logMemoryUsage() {\n    const usage = this.getMemoryUsage();\n    if (usage && process.env.NODE_ENV === 'development') {\n      console.log(`🧠 Memorie folosită: ${(usage.used / 1048576).toFixed(2)} MB (${usage.percentage.toFixed(1)}%)`);\n      \n      if (this.detectMemoryLeaks()) {\n        console.warn('⚠️ Posibilă scurgere de memorie detectată!');\n      }\n    }\n    return usage;\n  }\n};\n\n// Performance optimization utilities\nexport const performanceUtils = {\n  // Debounce function for performance\n  debounce(func, wait, immediate = false) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        timeout = null;\n        if (!immediate) func(...args);\n      };\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func(...args);\n    };\n  },\n\n  // Throttle function for performance\n  throttle(func, limit) {\n    let inThrottle;\n    return function(...args) {\n      if (!inThrottle) {\n        func.apply(this, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  },\n\n  // Request idle callback with fallback\n  requestIdleCallback(callback, options = {}) {\n    if ('requestIdleCallback' in window) {\n      return window.requestIdleCallback(callback, options);\n    } else {\n      // Fallback for browsers without support\n      return setTimeout(() => callback({ timeRemaining: () => 50 }), 1);\n    }\n  },\n\n  // Cancel idle callback\n  cancelIdleCallback(id) {\n    if ('cancelIdleCallback' in window) {\n      window.cancelIdleCallback(id);\n    } else {\n      clearTimeout(id);\n    }\n  },\n\n  // Optimize heavy computations\n  optimizeComputation(computation, chunkSize = 1000) {\n    return new Promise((resolve) => {\n      const chunks = [];\n      let index = 0;\n      \n      const processChunk = () => {\n        const endIndex = Math.min(index + chunkSize, computation.length);\n        const chunk = computation.slice(index, endIndex);\n        chunks.push(chunk);\n        index = endIndex;\n        \n        if (index < computation.length) {\n          this.requestIdleCallback(processChunk);\n        } else {\n          resolve(chunks.flat());\n        }\n      };\n      \n      processChunk();\n    });\n  }\n};\n\n// Create global performance monitor instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Initialize monitoring when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => {\n    performanceMonitor.recordMetric('DOM Ready', performance.now());\n  });\n} else {\n  performanceMonitor.recordMetric('DOM Ready', performance.now());\n}\n\n// Monitor page load\nwindow.addEventListener('load', () => {\n  performanceMonitor.recordMetric('Page Load', performance.now());\n  \n  // Log initial bundle and memory analysis\n  setTimeout(() => {\n    bundleAnalyzer.logBundleAnalysis();\n    memoryMonitor.logMemoryUsage();\n  }, 1000);\n});\n\n// Clean up on page unload\nwindow.addEventListener('beforeunload', () => {\n  performanceMonitor.disconnect();\n});\n\nexport default performanceMonitor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}