{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useToast } from '../components/common/Toast';\n\n// Network status hook\nexport const useNetworkStatus = () => {\n  _s();\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [lastOfflineTime, setLastOfflineTime] = useState(null);\n  const [connectionType, setConnectionType] = useState('unknown');\n  const toast = useToast();\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n\n      // Show reconnection message if we were offline\n      if (lastOfflineTime) {\n        const offlineDuration = Date.now() - lastOfflineTime;\n        if (offlineDuration > 5000) {\n          // Only show if offline for more than 5 seconds\n          toast.showSuccess('Conexiunea la internet a fost restabilită.');\n        }\n        setLastOfflineTime(null);\n      }\n    };\n    const handleOffline = () => {\n      setIsOnline(false);\n      setLastOfflineTime(Date.now());\n      toast.showWarning('Conexiunea la internet s-a pierdut. Unele funcții pot fi limitate.');\n    };\n    const handleConnectionChange = () => {\n      if (navigator.connection) {\n        setConnectionType(navigator.connection.effectiveType || 'unknown');\n      }\n    };\n\n    // Add event listeners\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Listen for connection changes (if supported)\n    if (navigator.connection) {\n      navigator.connection.addEventListener('change', handleConnectionChange);\n      setConnectionType(navigator.connection.effectiveType || 'unknown');\n    }\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      if (navigator.connection) {\n        navigator.connection.removeEventListener('change', handleConnectionChange);\n      }\n    };\n  }, [lastOfflineTime, toast]);\n  return {\n    isOnline,\n    connectionType,\n    isSlowConnection: connectionType === 'slow-2g' || connectionType === '2g',\n    lastOfflineTime\n  };\n};\n\n// Enhanced network status hook with retry queue\n_s(useNetworkStatus, \"tJ0qqANgudu/CS+qLjlmU4usM5Q=\", false, function () {\n  return [useToast];\n});\nexport const useNetworkStatusWithQueue = () => {\n  _s2();\n  const networkStatus = useNetworkStatus();\n  const [requestQueue, setRequestQueue] = useState([]);\n  const [isProcessingQueue, setIsProcessingQueue] = useState(false);\n  const addToQueue = (requestFunction, options = {}) => {\n    const queueItem = {\n      id: Date.now().toString(),\n      requestFunction,\n      options,\n      timestamp: Date.now(),\n      retryCount: 0\n    };\n    setRequestQueue(queue => [...queue, queueItem]);\n    return queueItem.id;\n  };\n  const removeFromQueue = id => {\n    setRequestQueue(queue => queue.filter(item => item.id !== id));\n  };\n  const processQueue = async () => {\n    if (!networkStatus.isOnline || isProcessingQueue || requestQueue.length === 0) {\n      return;\n    }\n    setIsProcessingQueue(true);\n    const itemsToProcess = [...requestQueue];\n    setRequestQueue([]);\n    for (const item of itemsToProcess) {\n      try {\n        await item.requestFunction();\n        console.log(`Successfully processed queued request ${item.id}`);\n      } catch (error) {\n        console.error(`Failed to process queued request ${item.id}:`, error);\n\n        // Re-queue if retryable and under retry limit\n        if (item.retryCount < (item.options.maxRetries || 3)) {\n          setRequestQueue(queue => [...queue, {\n            ...item,\n            retryCount: item.retryCount + 1\n          }]);\n        }\n      }\n    }\n    setIsProcessingQueue(false);\n  };\n\n  // Process queue when coming back online\n  useEffect(() => {\n    if (networkStatus.isOnline && requestQueue.length > 0) {\n      const timer = setTimeout(processQueue, 1000); // Wait 1 second after coming online\n      return () => clearTimeout(timer);\n    }\n  }, [networkStatus.isOnline, requestQueue.length]);\n  return {\n    ...networkStatus,\n    requestQueue,\n    addToQueue,\n    removeFromQueue,\n    processQueue,\n    isProcessingQueue\n  };\n};\n\n// Connection quality monitoring\n_s2(useNetworkStatusWithQueue, \"PYpF5VmmBUfawiaj97gNPAQ/y9g=\", false, function () {\n  return [useNetworkStatus];\n});\nexport const useConnectionQuality = () => {\n  _s3();\n  const [quality, setQuality] = useState('good');\n  const [latency, setLatency] = useState(null);\n  useEffect(() => {\n    let timeoutId;\n    const measureLatency = async () => {\n      const start = performance.now();\n      try {\n        // Use a simple image request to measure latency\n        const img = new Image();\n        img.onload = () => {\n          const end = performance.now();\n          const latencyMs = end - start;\n          setLatency(latencyMs);\n\n          // Determine connection quality based on latency\n          if (latencyMs < 100) {\n            setQuality('excellent');\n          } else if (latencyMs < 300) {\n            setQuality('good');\n          } else if (latencyMs < 1000) {\n            setQuality('fair');\n          } else {\n            setQuality('poor');\n          }\n        };\n        img.onerror = () => {\n          setQuality('poor');\n          setLatency(null);\n        };\n\n        // Use a small image for testing\n        img.src = `${process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080'}/favicon.ico?t=${Date.now()}`;\n      } catch (error) {\n        setQuality('poor');\n        setLatency(null);\n      }\n    };\n    const startMeasuring = () => {\n      measureLatency();\n      timeoutId = setTimeout(startMeasuring, 30000); // Measure every 30 seconds\n    };\n    if (navigator.onLine) {\n      startMeasuring();\n    }\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, []);\n  return {\n    quality,\n    latency,\n    isGoodConnection: quality === 'excellent' || quality === 'good'\n  };\n};\n_s3(useConnectionQuality, \"9ywGTdz+GfI6YEU9vQL0dQ86Qcs=\");\nexport default useNetworkStatus;","map":{"version":3,"names":["useState","useEffect","useToast","useNetworkStatus","_s","isOnline","setIsOnline","navigator","onLine","lastOfflineTime","setLastOfflineTime","connectionType","setConnectionType","toast","handleOnline","offlineDuration","Date","now","showSuccess","handleOffline","showWarning","handleConnectionChange","connection","effectiveType","window","addEventListener","removeEventListener","isSlowConnection","useNetworkStatusWithQueue","_s2","networkStatus","requestQueue","setRequestQueue","isProcessingQueue","setIsProcessingQueue","addToQueue","requestFunction","options","queueItem","id","toString","timestamp","retryCount","queue","removeFromQueue","filter","item","processQueue","length","itemsToProcess","console","log","error","maxRetries","timer","setTimeout","clearTimeout","useConnectionQuality","_s3","quality","setQuality","latency","setLatency","timeoutId","measureLatency","start","performance","img","Image","onload","end","latencyMs","onerror","src","process","env","REACT_APP_API_BASE_URL","startMeasuring","isGoodConnection"],"sources":["/Users/claudiu/Desktop/pe foc de lemne/frontend/src/hooks/useNetworkStatus.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useToast } from '../components/common/Toast';\n\n// Network status hook\nexport const useNetworkStatus = () => {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [lastOfflineTime, setLastOfflineTime] = useState(null);\n  const [connectionType, setConnectionType] = useState('unknown');\n  const toast = useToast();\n\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      \n      // Show reconnection message if we were offline\n      if (lastOfflineTime) {\n        const offlineDuration = Date.now() - lastOfflineTime;\n        if (offlineDuration > 5000) { // Only show if offline for more than 5 seconds\n          toast.showSuccess('Conexiunea la internet a fost restabilită.');\n        }\n        setLastOfflineTime(null);\n      }\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setLastOfflineTime(Date.now());\n      toast.showWarning('Conexiunea la internet s-a pierdut. Unele funcții pot fi limitate.');\n    };\n\n    const handleConnectionChange = () => {\n      if (navigator.connection) {\n        setConnectionType(navigator.connection.effectiveType || 'unknown');\n      }\n    };\n\n    // Add event listeners\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    \n    // Listen for connection changes (if supported)\n    if (navigator.connection) {\n      navigator.connection.addEventListener('change', handleConnectionChange);\n      setConnectionType(navigator.connection.effectiveType || 'unknown');\n    }\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      \n      if (navigator.connection) {\n        navigator.connection.removeEventListener('change', handleConnectionChange);\n      }\n    };\n  }, [lastOfflineTime, toast]);\n\n  return {\n    isOnline,\n    connectionType,\n    isSlowConnection: connectionType === 'slow-2g' || connectionType === '2g',\n    lastOfflineTime\n  };\n};\n\n// Enhanced network status hook with retry queue\nexport const useNetworkStatusWithQueue = () => {\n  const networkStatus = useNetworkStatus();\n  const [requestQueue, setRequestQueue] = useState([]);\n  const [isProcessingQueue, setIsProcessingQueue] = useState(false);\n\n  const addToQueue = (requestFunction, options = {}) => {\n    const queueItem = {\n      id: Date.now().toString(),\n      requestFunction,\n      options,\n      timestamp: Date.now(),\n      retryCount: 0\n    };\n\n    setRequestQueue(queue => [...queue, queueItem]);\n    return queueItem.id;\n  };\n\n  const removeFromQueue = (id) => {\n    setRequestQueue(queue => queue.filter(item => item.id !== id));\n  };\n\n  const processQueue = async () => {\n    if (!networkStatus.isOnline || isProcessingQueue || requestQueue.length === 0) {\n      return;\n    }\n\n    setIsProcessingQueue(true);\n\n    const itemsToProcess = [...requestQueue];\n    setRequestQueue([]);\n\n    for (const item of itemsToProcess) {\n      try {\n        await item.requestFunction();\n        console.log(`Successfully processed queued request ${item.id}`);\n      } catch (error) {\n        console.error(`Failed to process queued request ${item.id}:`, error);\n        \n        // Re-queue if retryable and under retry limit\n        if (item.retryCount < (item.options.maxRetries || 3)) {\n          setRequestQueue(queue => [...queue, {\n            ...item,\n            retryCount: item.retryCount + 1\n          }]);\n        }\n      }\n    }\n\n    setIsProcessingQueue(false);\n  };\n\n  // Process queue when coming back online\n  useEffect(() => {\n    if (networkStatus.isOnline && requestQueue.length > 0) {\n      const timer = setTimeout(processQueue, 1000); // Wait 1 second after coming online\n      return () => clearTimeout(timer);\n    }\n  }, [networkStatus.isOnline, requestQueue.length]);\n\n  return {\n    ...networkStatus,\n    requestQueue,\n    addToQueue,\n    removeFromQueue,\n    processQueue,\n    isProcessingQueue\n  };\n};\n\n// Connection quality monitoring\nexport const useConnectionQuality = () => {\n  const [quality, setQuality] = useState('good');\n  const [latency, setLatency] = useState(null);\n\n  useEffect(() => {\n    let timeoutId;\n\n    const measureLatency = async () => {\n      const start = performance.now();\n      \n      try {\n        // Use a simple image request to measure latency\n        const img = new Image();\n        img.onload = () => {\n          const end = performance.now();\n          const latencyMs = end - start;\n          setLatency(latencyMs);\n\n          // Determine connection quality based on latency\n          if (latencyMs < 100) {\n            setQuality('excellent');\n          } else if (latencyMs < 300) {\n            setQuality('good');\n          } else if (latencyMs < 1000) {\n            setQuality('fair');\n          } else {\n            setQuality('poor');\n          }\n        };\n        \n        img.onerror = () => {\n          setQuality('poor');\n          setLatency(null);\n        };\n        \n        // Use a small image for testing\n        img.src = `${process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080'}/favicon.ico?t=${Date.now()}`;\n      } catch (error) {\n        setQuality('poor');\n        setLatency(null);\n      }\n    };\n\n    const startMeasuring = () => {\n      measureLatency();\n      timeoutId = setTimeout(startMeasuring, 30000); // Measure every 30 seconds\n    };\n\n    if (navigator.onLine) {\n      startMeasuring();\n    }\n\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, []);\n\n  return {\n    quality,\n    latency,\n    isGoodConnection: quality === 'excellent' || quality === 'good'\n  };\n};\n\nexport default useNetworkStatus;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}