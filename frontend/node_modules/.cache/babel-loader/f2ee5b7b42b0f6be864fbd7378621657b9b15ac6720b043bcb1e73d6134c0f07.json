{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$();\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { useApiToast } from '../components/common/Toast';\n\n// Hook for managing async operations with loading states\nexport const useAsyncOperation = (options = {}) => {\n  _s();\n  const {\n    onSuccess,\n    onError,\n    showSuccessToast = false,\n    showErrorToast = true,\n    successMessage = 'Operațiunea a fost finalizată cu succes.',\n    errorMessage = 'A apărut o eroare. Încercați din nou.',\n    autoReset = true,\n    resetDelay = 2000\n  } = options;\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(null);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const toast = useApiToast();\n  const timeoutRef = useRef(null);\n\n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n  const execute = useCallback(async (asyncFunction, ...args) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      setIsSuccess(false);\n      setData(null);\n      const result = await asyncFunction(...args);\n      setData(result);\n      setIsSuccess(true);\n      if (showSuccessToast) {\n        toast.showSuccess(successMessage);\n      }\n      if (onSuccess) {\n        onSuccess(result);\n      }\n\n      // Auto reset success state\n      if (autoReset) {\n        timeoutRef.current = setTimeout(() => {\n          setIsSuccess(false);\n        }, resetDelay);\n      }\n      return result;\n    } catch (err) {\n      console.error('Async operation error:', err);\n      setError(err);\n      if (showErrorToast) {\n        if (err.isNetworkError) {\n          toast.handleNetworkError();\n        } else {\n          toast.handleApiError(err, errorMessage);\n        }\n      }\n      if (onError) {\n        onError(err);\n      }\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onSuccess, onError, showSuccessToast, showErrorToast, successMessage, errorMessage, autoReset, resetDelay, toast]);\n  const reset = useCallback(() => {\n    setIsLoading(false);\n    setError(null);\n    setData(null);\n    setIsSuccess(false);\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  }, []);\n  return {\n    execute,\n    reset,\n    isLoading,\n    error,\n    data,\n    isSuccess,\n    // Convenience status flags\n    isIdle: !isLoading && !error && !isSuccess,\n    isError: !!error,\n    hasData: !!data\n  };\n};\n\n// Hook for form submissions\n_s(useAsyncOperation, \"tVKQUFUJFvIrTFZgwfJOwXm4wrE=\", false, function () {\n  return [useApiToast];\n});\nexport const useFormSubmission = (options = {}) => {\n  _s2();\n  const {\n    onSuccess,\n    onError,\n    successMessage = 'Formularul a fost trimis cu succes.',\n    errorMessage = 'Eroare la trimiterea formularului. Încercați din nou.',\n    ...restOptions\n  } = options;\n  const asyncOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage,\n    errorMessage,\n    ...restOptions\n  });\n  const submitForm = useCallback(async (formData, submitFunction) => {\n    return asyncOp.execute(submitFunction, formData);\n  }, [asyncOp.execute]);\n  return {\n    ...asyncOp,\n    submitForm,\n    isSubmitting: asyncOp.isLoading,\n    submissionError: asyncOp.error,\n    isSubmitted: asyncOp.isSuccess\n  };\n};\n\n// Hook for data fetching\n_s2(useFormSubmission, \"0vleaRUMUMlsaRuvPmlOvJeN/v8=\", false, function () {\n  return [useAsyncOperation];\n});\nexport const useDataFetching = (options = {}) => {\n  _s3();\n  const {\n    onSuccess,\n    onError,\n    errorMessage = 'Eroare la încărcarea datelor. Încercați din nou.',\n    ...restOptions\n  } = options;\n  const asyncOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: false,\n    showErrorToast: true,\n    errorMessage,\n    ...restOptions\n  });\n  const fetchData = useCallback(async (fetchFunction, ...args) => {\n    return asyncOp.execute(fetchFunction, ...args);\n  }, [asyncOp.execute]);\n  const refetch = useCallback(async (fetchFunction, ...args) => {\n    return fetchData(fetchFunction, ...args);\n  }, [fetchData]);\n  return {\n    ...asyncOp,\n    fetchData,\n    refetch,\n    isFetching: asyncOp.isLoading,\n    fetchError: asyncOp.error,\n    isFetched: asyncOp.isSuccess\n  };\n};\n\n// Hook for delete operations\n_s3(useDataFetching, \"2QfL2Pi0qO60ja28OhQl+WGEtlA=\", false, function () {\n  return [useAsyncOperation];\n});\nexport const useDeleteOperation = (options = {}) => {\n  _s4();\n  const {\n    onSuccess,\n    onError,\n    successMessage = 'Elementul a fost șters cu succes.',\n    errorMessage = 'Eroare la ștergerea elementului. Încercați din nou.',\n    confirmMessage = 'Sigur doriți să ștergeți acest element?',\n    requireConfirmation = true,\n    ...restOptions\n  } = options;\n  const asyncOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage,\n    errorMessage,\n    ...restOptions\n  });\n  const deleteItem = useCallback(async (deleteFunction, ...args) => {\n    if (requireConfirmation) {\n      const confirmed = window.confirm(confirmMessage);\n      if (!confirmed) {\n        return null;\n      }\n    }\n    return asyncOp.execute(deleteFunction, ...args);\n  }, [asyncOp.execute, requireConfirmation, confirmMessage]);\n  return {\n    ...asyncOp,\n    deleteItem,\n    isDeleting: asyncOp.isLoading,\n    deleteError: asyncOp.error,\n    isDeleted: asyncOp.isSuccess\n  };\n};\n\n// Hook for update operations\n_s4(useDeleteOperation, \"jcwkkC6KqEVTvfebTwdEkJUl6hY=\", false, function () {\n  return [useAsyncOperation];\n});\nexport const useUpdateOperation = (options = {}) => {\n  _s5();\n  const {\n    onSuccess,\n    onError,\n    successMessage = 'Elementul a fost actualizat cu succes.',\n    errorMessage = 'Eroare la actualizarea elementului. Încercați din nou.',\n    ...restOptions\n  } = options;\n  const asyncOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage,\n    errorMessage,\n    ...restOptions\n  });\n  const updateItem = useCallback(async (updateFunction, ...args) => {\n    return asyncOp.execute(updateFunction, ...args);\n  }, [asyncOp.execute]);\n  return {\n    ...asyncOp,\n    updateItem,\n    isUpdating: asyncOp.isLoading,\n    updateError: asyncOp.error,\n    isUpdated: asyncOp.isSuccess\n  };\n};\n\n// Hook for cart operations\n_s5(useUpdateOperation, \"EOVrc1fZdKj7JCk+CpNKW86oFDc=\", false, function () {\n  return [useAsyncOperation];\n});\nexport const useCartOperation = (options = {}) => {\n  _s6();\n  const {\n    onSuccess,\n    onError,\n    addSuccessMessage = 'Produs adăugat în coș.',\n    removeSuccessMessage = 'Produs eliminat din coș.',\n    updateSuccessMessage = 'Cantitatea a fost actualizată.',\n    clearSuccessMessage = 'Coșul a fost golit.',\n    errorMessage = 'Eroare la actualizarea coșului. Încercați din nou.',\n    ...restOptions\n  } = options;\n  const addOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage: addSuccessMessage,\n    errorMessage,\n    ...restOptions\n  });\n  const removeOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage: removeSuccessMessage,\n    errorMessage,\n    ...restOptions\n  });\n  const updateOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage: updateSuccessMessage,\n    errorMessage,\n    ...restOptions\n  });\n  const clearOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage: clearSuccessMessage,\n    errorMessage,\n    ...restOptions\n  });\n  const addToCart = useCallback(async (addFunction, ...args) => {\n    return addOp.execute(addFunction, ...args);\n  }, [addOp.execute]);\n  const removeFromCart = useCallback(async (removeFunction, ...args) => {\n    return removeOp.execute(removeFunction, ...args);\n  }, [removeOp.execute]);\n  const updateQuantity = useCallback(async (updateFunction, ...args) => {\n    return updateOp.execute(updateFunction, ...args);\n  }, [updateOp.execute]);\n  const clearCart = useCallback(async (clearFunction, ...args) => {\n    return clearOp.execute(clearFunction, ...args);\n  }, [clearOp.execute]);\n  return {\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    isAddingToCart: addOp.isLoading,\n    isRemovingFromCart: removeOp.isLoading,\n    isUpdatingQuantity: updateOp.isLoading,\n    isClearingCart: clearOp.isLoading,\n    cartError: addOp.error || removeOp.error || updateOp.error || clearOp.error,\n    reset: () => {\n      addOp.reset();\n      removeOp.reset();\n      updateOp.reset();\n      clearOp.reset();\n    }\n  };\n};\n_s6(useCartOperation, \"f+6mB3rQepAN+xYp8Qr/jcUc8UI=\", false, function () {\n  return [useAsyncOperation, useAsyncOperation, useAsyncOperation, useAsyncOperation];\n});\nexport default useAsyncOperation;","map":{"version":3,"names":["useState","useCallback","useRef","useEffect","useApiToast","useAsyncOperation","options","_s","onSuccess","onError","showSuccessToast","showErrorToast","successMessage","errorMessage","autoReset","resetDelay","isLoading","setIsLoading","error","setError","data","setData","isSuccess","setIsSuccess","toast","timeoutRef","current","clearTimeout","execute","asyncFunction","args","result","showSuccess","setTimeout","err","console","isNetworkError","handleNetworkError","handleApiError","reset","isIdle","isError","hasData","useFormSubmission","_s2","restOptions","asyncOp","submitForm","formData","submitFunction","isSubmitting","submissionError","isSubmitted","useDataFetching","_s3","fetchData","fetchFunction","refetch","isFetching","fetchError","isFetched","useDeleteOperation","_s4","confirmMessage","requireConfirmation","deleteItem","deleteFunction","confirmed","window","confirm","isDeleting","deleteError","isDeleted","useUpdateOperation","_s5","updateItem","updateFunction","isUpdating","updateError","isUpdated","useCartOperation","_s6","addSuccessMessage","removeSuccessMessage","updateSuccessMessage","clearSuccessMessage","addOp","removeOp","updateOp","clearOp","addToCart","addFunction","removeFromCart","removeFunction","updateQuantity","clearCart","clearFunction","isAddingToCart","isRemovingFromCart","isUpdatingQuantity","isClearingCart","cartError"],"sources":["/Users/claudiu/Desktop/pe foc de lemne/frontend/src/hooks/useAsyncOperation.js"],"sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\nimport { useApiToast } from '../components/common/Toast';\n\n// Hook for managing async operations with loading states\nexport const useAsyncOperation = (options = {}) => {\n  const {\n    onSuccess,\n    onError,\n    showSuccessToast = false,\n    showErrorToast = true,\n    successMessage = 'Operațiunea a fost finalizată cu succes.',\n    errorMessage = 'A apărut o eroare. Încercați din nou.',\n    autoReset = true,\n    resetDelay = 2000\n  } = options;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(null);\n  const [isSuccess, setIsSuccess] = useState(false);\n  \n  const toast = useApiToast();\n  const timeoutRef = useRef(null);\n\n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  const execute = useCallback(async (asyncFunction, ...args) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      setIsSuccess(false);\n      setData(null);\n\n      const result = await asyncFunction(...args);\n      \n      setData(result);\n      setIsSuccess(true);\n      \n      if (showSuccessToast) {\n        toast.showSuccess(successMessage);\n      }\n      \n      if (onSuccess) {\n        onSuccess(result);\n      }\n\n      // Auto reset success state\n      if (autoReset) {\n        timeoutRef.current = setTimeout(() => {\n          setIsSuccess(false);\n        }, resetDelay);\n      }\n\n      return result;\n    } catch (err) {\n      console.error('Async operation error:', err);\n      \n      setError(err);\n      \n      if (showErrorToast) {\n        if (err.isNetworkError) {\n          toast.handleNetworkError();\n        } else {\n          toast.handleApiError(err, errorMessage);\n        }\n      }\n      \n      if (onError) {\n        onError(err);\n      }\n\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onSuccess, onError, showSuccessToast, showErrorToast, successMessage, errorMessage, autoReset, resetDelay, toast]);\n\n  const reset = useCallback(() => {\n    setIsLoading(false);\n    setError(null);\n    setData(null);\n    setIsSuccess(false);\n    \n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  }, []);\n\n  return {\n    execute,\n    reset,\n    isLoading,\n    error,\n    data,\n    isSuccess,\n    // Convenience status flags\n    isIdle: !isLoading && !error && !isSuccess,\n    isError: !!error,\n    hasData: !!data\n  };\n};\n\n// Hook for form submissions\nexport const useFormSubmission = (options = {}) => {\n  const {\n    onSuccess,\n    onError,\n    successMessage = 'Formularul a fost trimis cu succes.',\n    errorMessage = 'Eroare la trimiterea formularului. Încercați din nou.',\n    ...restOptions\n  } = options;\n\n  const asyncOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage,\n    errorMessage,\n    ...restOptions\n  });\n\n  const submitForm = useCallback(async (formData, submitFunction) => {\n    return asyncOp.execute(submitFunction, formData);\n  }, [asyncOp.execute]);\n\n  return {\n    ...asyncOp,\n    submitForm,\n    isSubmitting: asyncOp.isLoading,\n    submissionError: asyncOp.error,\n    isSubmitted: asyncOp.isSuccess\n  };\n};\n\n// Hook for data fetching\nexport const useDataFetching = (options = {}) => {\n  const {\n    onSuccess,\n    onError,\n    errorMessage = 'Eroare la încărcarea datelor. Încercați din nou.',\n    ...restOptions\n  } = options;\n\n  const asyncOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: false,\n    showErrorToast: true,\n    errorMessage,\n    ...restOptions\n  });\n\n  const fetchData = useCallback(async (fetchFunction, ...args) => {\n    return asyncOp.execute(fetchFunction, ...args);\n  }, [asyncOp.execute]);\n\n  const refetch = useCallback(async (fetchFunction, ...args) => {\n    return fetchData(fetchFunction, ...args);\n  }, [fetchData]);\n\n  return {\n    ...asyncOp,\n    fetchData,\n    refetch,\n    isFetching: asyncOp.isLoading,\n    fetchError: asyncOp.error,\n    isFetched: asyncOp.isSuccess\n  };\n};\n\n// Hook for delete operations\nexport const useDeleteOperation = (options = {}) => {\n  const {\n    onSuccess,\n    onError,\n    successMessage = 'Elementul a fost șters cu succes.',\n    errorMessage = 'Eroare la ștergerea elementului. Încercați din nou.',\n    confirmMessage = 'Sigur doriți să ștergeți acest element?',\n    requireConfirmation = true,\n    ...restOptions\n  } = options;\n\n  const asyncOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage,\n    errorMessage,\n    ...restOptions\n  });\n\n  const deleteItem = useCallback(async (deleteFunction, ...args) => {\n    if (requireConfirmation) {\n      const confirmed = window.confirm(confirmMessage);\n      if (!confirmed) {\n        return null;\n      }\n    }\n\n    return asyncOp.execute(deleteFunction, ...args);\n  }, [asyncOp.execute, requireConfirmation, confirmMessage]);\n\n  return {\n    ...asyncOp,\n    deleteItem,\n    isDeleting: asyncOp.isLoading,\n    deleteError: asyncOp.error,\n    isDeleted: asyncOp.isSuccess\n  };\n};\n\n// Hook for update operations\nexport const useUpdateOperation = (options = {}) => {\n  const {\n    onSuccess,\n    onError,\n    successMessage = 'Elementul a fost actualizat cu succes.',\n    errorMessage = 'Eroare la actualizarea elementului. Încercați din nou.',\n    ...restOptions\n  } = options;\n\n  const asyncOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage,\n    errorMessage,\n    ...restOptions\n  });\n\n  const updateItem = useCallback(async (updateFunction, ...args) => {\n    return asyncOp.execute(updateFunction, ...args);\n  }, [asyncOp.execute]);\n\n  return {\n    ...asyncOp,\n    updateItem,\n    isUpdating: asyncOp.isLoading,\n    updateError: asyncOp.error,\n    isUpdated: asyncOp.isSuccess\n  };\n};\n\n// Hook for cart operations\nexport const useCartOperation = (options = {}) => {\n  const {\n    onSuccess,\n    onError,\n    addSuccessMessage = 'Produs adăugat în coș.',\n    removeSuccessMessage = 'Produs eliminat din coș.',\n    updateSuccessMessage = 'Cantitatea a fost actualizată.',\n    clearSuccessMessage = 'Coșul a fost golit.',\n    errorMessage = 'Eroare la actualizarea coșului. Încercați din nou.',\n    ...restOptions\n  } = options;\n\n  const addOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage: addSuccessMessage,\n    errorMessage,\n    ...restOptions\n  });\n\n  const removeOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage: removeSuccessMessage,\n    errorMessage,\n    ...restOptions\n  });\n\n  const updateOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage: updateSuccessMessage,\n    errorMessage,\n    ...restOptions\n  });\n\n  const clearOp = useAsyncOperation({\n    onSuccess,\n    onError,\n    showSuccessToast: true,\n    showErrorToast: true,\n    successMessage: clearSuccessMessage,\n    errorMessage,\n    ...restOptions\n  });\n\n  const addToCart = useCallback(async (addFunction, ...args) => {\n    return addOp.execute(addFunction, ...args);\n  }, [addOp.execute]);\n\n  const removeFromCart = useCallback(async (removeFunction, ...args) => {\n    return removeOp.execute(removeFunction, ...args);\n  }, [removeOp.execute]);\n\n  const updateQuantity = useCallback(async (updateFunction, ...args) => {\n    return updateOp.execute(updateFunction, ...args);\n  }, [updateOp.execute]);\n\n  const clearCart = useCallback(async (clearFunction, ...args) => {\n    return clearOp.execute(clearFunction, ...args);\n  }, [clearOp.execute]);\n\n  return {\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    isAddingToCart: addOp.isLoading,\n    isRemovingFromCart: removeOp.isLoading,\n    isUpdatingQuantity: updateOp.isLoading,\n    isClearingCart: clearOp.isLoading,\n    cartError: addOp.error || removeOp.error || updateOp.error || clearOp.error,\n    reset: () => {\n      addOp.reset();\n      removeOp.reset();\n      updateOp.reset();\n      clearOp.reset();\n    }\n  };\n};\n\nexport default useAsyncOperation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}